@page "/weather"
@attribute [StreamRendering]

<PageTitle >Weather</PageTitle>

<h1 style="text-align: center;">Weather</h1>


 <div class="card">
        <div class="search">
            <input type="text" placeholder="Enter City Name" spellcheck="false">
            <button><img src="images/search.png"></button>
        </div>

        <div class="error">
            <p>Invalid City Name!</p>
        </div>

        <div class="weather">
            <img src="images/rain.png" class="weather-icon">
            <h1 class="temp">22°c</h1>
            <h2 class="city">New York</h2>
            <div class="details">
                <div class="col">
                    <img src="images/humidity.png">
                    <div>
                        <p class="humidity">50%</p>
                        <p>Humidity</p>
                    </div>
                </div>

                <div class="col">
                    <img src="images/wind.png">
                    <div>
                        <p class="wind">15 km/h</p>
                        <p>Wind Speed</p>
                    </div>
                </div>
            </div>
        </div>
   @* </div>

<script>

    const apiKey = "d8cab8bea5e32d2b21acf2fb9419eebf";
    const apiUrl = "https:// api.openweathermap.org/data/2.5/weather?units=metric&q=";
    const forecastUrl = "https://api.openweathermap.org/data/2.5/forecast?units=metric&q=";
    const searchBox = document.querySelector(".search input");
    const searchButton = document.querySelector(".search button");
    const weatherIcon = document.querySelector(".weather-icon");
    const weatherCard = document.querySelector(".card");
    const forecastContainer = document.querySelector(".forecast-container");

    async function checkWeather(city) {
        const response = await fetch(apiUrl + city + `&appid=${apiKey}`);
        if(response.status == 404){
            document.querySelector(".error").style.display = "block";
            document.querySelector(".weather").style.display = "none";
        }
        else{
            var data = await response.json();

        document.querySelector(".city").innerHTML = data.name;
        document.querySelector(".temp").innerHTML = Math.round(data.main.temp) +"°c";
        document.querySelector(".humidity").innerHTML = data.main.humidity + "%";
        document.querySelector(".wind").innerHTML = data.wind.speed + " km/h";

        if (data.weather[0].main == "Clouds"){
            weatherIcon.src = "images/clouds.png";
        }
        else if(data.weather[0].main == "Clear"){
            weatherIcon.src = "images/clear.png";
        }
        else if(data.weather[0].main == "Rain"){
            weatherIcon.src = "images/rain.png";
        }
        else if(data.weather[0].main == "Drizzle"){
            weatherIcon.src = "images/drizzle.png";
        }
        else if(data.weather[0].main == "Mist"){
            weatherIcon.src = "images/mist.png";
        }    

        document.querySelector(".error").style.display = "none";
        document.querySelector(".weather").style.display = "block";

        }     
    }

    searchButton.addEventListener("click", ()=>{
        checkWeather(searchBox.value);
    });

    document.addEventListener("click", (event)=>{
        if(!weatherCard.contains(event.target)){
            searchBox.value = "";
            document.querySelector(".error").style.display = "none";
            document.querySelector(".weather").style.display = "none";
        }   
    });

    </script> *@


       <div class="forecast" style="display: none;">
        <h3>5-Day Forecast</h3>
        <div class="forecast-container"></div>
    </div>

    <div class="top-cities">
        <h3>Top Cities</h3>
        <div class="cities-list">
            <button class="city-btn" data-city="New York">New York</button>
            <button class="city-btn" data-city="London">London</button>
            <button class="city-btn" data-city="Tokyo">Tokyo</button>
            <button class="city-btn" data-city="Paris">Paris</button>
            <button class="city-btn" data-city="Sydney">Sydney</button>
        </div>
    </div>
</div>

<script>
    const apiKey = "d8cab8bea5e32d2b21acf2fb9419eebf";
    const weatherUrl = "https://api.openweathermap.org/data/2.5/weather?units=metric&q=";
    const forecastUrl = "https://api.openweathermap.org/data/2.5/forecast?units=metric&q=";
    
    const searchBox = document.querySelector(".search input");
    const searchButton = document.querySelector(".search button");
    const weatherIcon = document.querySelector(".weather-icon");
    const weatherCard = document.querySelector(".card");
    const forecastContainer = document.querySelector(".forecast-container");
    const forecastSection = document.querySelector(".forecast");

    async function fetchWeather(city) {
        try {
            const response = await fetch(`${weatherUrl}${city}&appid=${apiKey}`);
            if (!response.ok) {
                throw new Error("Invalid City Name!");
            }
            const data = await response.json();
            updateWeatherUI(data);
            fetchForecast(city);
        } catch (error) {
            document.querySelector(".error").style.display = "block";
            document.querySelector(".weather").style.display = "none";
            forecastSection.style.display = "none";
        }
    }

    function updateWeatherUI(data) {
        document.querySelector(".city").innerHTML = data.name;
        document.querySelector(".temp").innerHTML = Math.round(data.main.temp) + "°c";
        document.querySelector(".humidity").innerHTML = data.main.humidity + "%";
        document.querySelector(".wind").innerHTML = data.wind.speed + " km/h";

        const weatherCondition = data.weather[0].main;
        const weatherIcons = {
            Clouds: "images/clouds.png",
            Clear: "images/clear.png",
            Rain: "images/rain.png",
            Drizzle: "images/drizzle.png",
            Mist: "images/mist.png",
        };

        weatherIcon.src = weatherIcons[weatherCondition] || "images/default.png";
        document.querySelector(".error").style.display = "none";
        document.querySelector(".weather").style.display = "block";
    }

    async function fetchForecast(city) {
        try {
            const response = await fetch(`${forecastUrl}${city}&appid=${apiKey}`);
            const data = await response.json();
            updateForecastUI(data);
        } catch (error) {
            console.error("Error fetching forecast:", error);
        }
    }

    function updateForecastUI(data) {
        forecastContainer.innerHTML = "";
        const dailyForecast = {};

        data.list.forEach(item => {
            const date = item.dt_txt.split(" ")[0]; // Extracting the date
            if (!dailyForecast[date]) {
                dailyForecast[date] = item;
            }
        });

        Object.values(dailyForecast).forEach(day => {
            const date = new Date(day.dt_txt).toLocaleDateString("en-US", { weekday: "short" });
            const icon = day.weather[0].main.toLowerCase();
            const temp = Math.round(day.main.temp) + "°c";

            forecastContainer.innerHTML += `
                <div class="forecast-item">
                    <p>${date}</p>
                    <img src="images/${icon}.png">
                    <p>${temp}</p>
                </div>`;
        });

        forecastSection.style.display = "block";
    }

    function getUserLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                const geoUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;
                
                try {
                    const response = await fetch(geoUrl);
                    const data = await response.json();
                    fetchWeather(data.name);
                } catch (error) {
                    console.error("Error fetching user location weather:", error);
                }
            });
        }
    }

    function resetApp() {
        searchBox.value = "";
        document.querySelector(".weather").style.display = "none";
        document.querySelector(".error").style.display = "none";
        forecastSection.style.display = "none";
    }

    searchButton.addEventListener("click", () => {
        if (searchBox.value.trim() !== "") {
            fetchWeather(searchBox.value);
        }
    });

    document.querySelectorAll(".city-btn").forEach(button => {
        button.addEventListener("click", () => fetchWeather(button.dataset.city));
    });

    document.addEventListener("click", (event) => {
        if (!weatherCard.contains(event.target)) {
            resetApp();
        }
    });
    getUserLocation();

</script>


@* @if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
} *@
