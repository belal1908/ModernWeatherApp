@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using MWA.DBConnections
@using MWA.Models
@using MWA.Services
@using MudBlazor
@inject MongoHelper mongoHelper
@inject UserStateService UserSessionService
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject Supabase.Client supabase

<PageTitle >Weather</PageTitle>

<body 
    class="weather-page"> 
</body>

<button class="mode-toggle" onclick="toggleMode()">
    <img src="images/contrast.png">
</button>

 <div class="card">
        <div class="search">
            <input type="text" placeholder="Enter City Name" spellcheck="false">
            <button>
                <img src="images/search.png">
            </button>

            <div class="auto-location">

            <button>
                <img src="images/gps.png">
            </button>
            </div>
        </div>

        

        <div class="error">
            <p>Invalid City Name!</p>
        </div>

        <div class="weather">
            <img src="images/rain.png" class="weather-icon">
            <h1 class="temp">22°c</h1>
            <h2 class="city">New York</h2>
            <div class="details">
                <div class="col">
                    <img src="images/humidity.png">
                    <div>
                        <p class="humidity">50%</p>
                        <p>Humidity</p>
                    </div>
                </div>

                <div class="col">
                    <img src="images/wind.png">
                    <div>
                        <p class="wind">15 km/h</p>
                        <p>Wind Speed</p>
                    </div>
                </div>
            </div>
        </div>


       <div class="forecast" style="display: none;">
        <h3>5-Day Forecast</h3>
        <div class="forecast-container"></div>
    </div>

    <div class="top-cities">
        <h3>Top Cities</h3>
        <div class="cities-list">
            <button class="city-btn" data-city="New York">New York</button>
            <button class="city-btn" data-city="London">London</button>
            <button class="city-btn" data-city="Tokyo">Tokyo</button>
            <button class="city-btn" data-city="Paris">Paris</button>
            <button class="city-btn" data-city="Sydney">Sydney</button>
        </div>
    </div>

    <div class="favorites" style="margin-top: 30px; text-align: center;">
        <button @onclick="SaveCurrentCityToFavorites" class="city-btn"><img src="images/favorite.png" alt=""></button>
        <ul>
            @foreach (var favCity in favoriteCities)
            {
                <li style="color: white;">@favCity.CityName <button @onclick="() => DeleteFavoriteCity(favCity.CityName)" class="city-btn">Remove</button></li>
            }
        </ul>
    </div>
</div>

@code {
    private List<FavoriteCity> favoriteCities = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = UserSessionService.LoggedInUserId;
        if (!string.IsNullOrEmpty(userId))
        {
            favoriteCities = await mongoHelper.GetFavoriteCitiesAsync(userId);
        }
    }

    private async Task SaveCurrentCityToFavorites()
    { Console.WriteLine("SaveCurrentCityToFavorites called");
        var cityName = await JS.InvokeAsync<string>("getCurrentCityName");
            Console.WriteLine($"Fetched City: {cityName}");
        if (string.IsNullOrEmpty(cityName)){
        Console.WriteLine("City name is null or empty.");
        return;
    }

        var userId = UserSessionService.LoggedInUserId;
        Console.WriteLine($"User ID: {userId}");

        if (string.IsNullOrEmpty(userId))
        {
        Console.WriteLine("User ID is null or empty.");
        return;
        }

        var alreadyExists = await mongoHelper.IsCityFavoritedAsync(cityName, userId);
        if (alreadyExists)
        {
            Snackbar.Add("City already in favorites.", Severity.Info);
            return;
        }

        var favoriteCity = new FavoriteCity
        {
            CityName = cityName,
            UserId = userId,
            WeatherDetails = null // To be filled if want to store more info later in the future
        };

        await mongoHelper.AddFavoriteCityAsync(favoriteCity);
        favoriteCities.Add(favoriteCity);
        Snackbar.Add("City added to favorites!", Severity.Success);
        StateHasChanged();
    }

    private async Task DeleteFavoriteCity(string cityName)
    {
        var userId = UserSessionService.LoggedInUserId;
        if (string.IsNullOrEmpty(userId)) return;

        await mongoHelper.DeleteFavoriteCityAsync(cityName, userId);
        favoriteCities.RemoveAll(c => c.CityName == cityName);
        Snackbar.Add("City removed from favorites.", Severity.Warning);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await JS.InvokeVoidAsync("initializeWeatherButtons");
    }
}
}
<script>

    if (typeof apiKey === 'undefined') {
    var apiKey = "d8cab8bea5e32d2b21acf2fb9419eebf";
}
    const weatherUrl = "https://api.openweathermap.org/data/2.5/weather?units=metric&q=";
    const forecastUrl = "https://api.openweathermap.org/data/2.5/forecast?units=metric&q=";
    
    const searchBox = document.querySelector(".search input");
    const searchButton = document.querySelector(".search button");
    const weatherIcon = document.querySelector(".weather-icon");
    const weatherCard = document.querySelector(".card");
    const forecastContainer = document.querySelector(".forecast-container");
    const forecastSection = document.querySelector(".forecast");
    const autoLocationBtn = document.querySelector(".auto-location");

    async function fetchWeather(city) {
    if (!city || city.trim() === "") {
        console.warn("City is undefined or empty.");
        return;
    }

    try {
        const response = await fetch(`${weatherUrl}${encodeURIComponent(city)}&appid=${apiKey}`);
            if (!response.ok) {
                throw new Error("Invalid City Name!");
            }
            const data = await response.json();
            updateWeatherUI(data);
            fetchForecast(city);
        } catch (error) {
            document.querySelector(".error").style.display = "block";
            document.querySelector(".weather").style.display = "none";
            forecastSection.style.display = "none";
        }
    }

    function updateWeatherUI(data) {
        document.querySelector(".city").innerHTML = data.name;
        document.querySelector(".temp").innerHTML = Math.round(data.main.temp) + "°c";
        document.querySelector(".humidity").innerHTML = data.main.humidity + "%";
        document.querySelector(".wind").innerHTML = data.wind.speed + " km/h";

        const weatherCondition = data.weather[0].main;
        const weatherIcons = {
            Clouds: "images/clouds.png",
            Clear: "images/clear.png",
            Rain: "images/rain.png",
            Drizzle: "images/drizzle.png",
            Mist: "images/mist.png",
        };

        weatherIcon.src = weatherIcons[weatherCondition] || "images/default.png";
        document.querySelector(".error").style.display = "none";
        document.querySelector(".weather").style.display = "block";
    }

    async function fetchForecast(city) {
        try {
            const response = await fetch(`${forecastUrl}${city}&appid=${apiKey}`);
            const data = await response.json();
            updateForecastUI(data);
        } catch (error) {
            console.error("Error fetching forecast:", error);
        }
    }

    function updateForecastUI(data) {
        forecastContainer.innerHTML = "";
        const dailyForecast = {};

        data.list.forEach(item => {
            const date = item.dt_txt.split(" ")[0];
            if (!dailyForecast[date]) {
                dailyForecast[date] = item;
            }
        });

        Object.values(dailyForecast).forEach(day => {
            const date = new Date(day.dt_txt).toLocaleDateString("en-US", { weekday: "short" });
            const icon = day.weather[0].main.toLowerCase();
            const temp = Math.round(day.main.temp) + "°c";

            forecastContainer.innerHTML += `
                <div class="forecast-item">
                    <p>${date}</p>
                    <img src="images/${icon}.png">
                    <p>${temp}</p>
                </div>`;
        });

        forecastSection.style.display = "block";
    }

    function getUserLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(async (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                const geoUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;
                
                try {
                    const response = await fetch(geoUrl);
                    const data = await response.json();
                    fetchWeather(data.name);
                } catch (error) {
                    console.error("Error fetching user location weather:", error);
                }
            }, (error) => {
                alert("Location access denied. Please enter a city manually.");
            });
        } else {
            alert("Geolocation is not supported by your browser.");
        }
    }

    function resetApp() {
        searchBox.value = "";
        document.querySelector(".weather").style.display = "none";
        document.querySelector(".error").style.display = "none";
        forecastSection.style.display = "none";
    }

    document.addEventListener("DOMContentLoaded", () => {
    @* const searchBox = document.querySelector(".search input");
    const searchButton = document.querySelector(".search button");
    const autoLocationBtn = document.querySelector(".auto-location button");
    const weatherCard = document.querySelector(".card"); *@

    if (searchButton && searchBox) {
        searchButton.addEventListener("click", () => {
            if (searchBox.value.trim() !== "") {
                fetchWeather(searchBox.value);
            }
        });
    }

    if (autoLocationBtn) {
        autoLocationBtn.addEventListener("click", () => {
            getUserLocation();
        });
    }

    document.querySelectorAll(".city-btn").forEach(button => {
        button.addEventListener("click", () => fetchWeather(button.dataset.city));
    });

    document.addEventListener("click", (event) => {
        if (weatherCard && !weatherCard.contains(event.target)) {
            resetApp();
        }
    });
});

    function toggleMode() {
    document.querySelector(".weather-page").classList.toggle("dark-mode");

    let modeButton = document.querySelector(".mode-toggle");
    modeButton.innerHTML = `<img src="images/contrast.png" alt="Theme Toggle" width="24px">`;
}

window.getCurrentCityName = () => {
    const city = document.querySelector(".city")?.innerText;
    return city || "";
};


window.initializeWeatherButtons = () => {
    const searchBox = document.querySelector(".search input");
    const searchButton = document.querySelector(".search button");
    const autoLocationBtn = document.querySelector(".auto-location button");
    const weatherCard = document.querySelector(".card");

    if (searchButton && searchBox) {
        searchButton.addEventListener("click", () => {
            if (searchBox.value.trim() !== "") {
                fetchWeather(searchBox.value);
            }
        });
    }

    if (autoLocationBtn) {
        autoLocationBtn.addEventListener("click", () => {
            getUserLocation();
        });
    }

    document.querySelectorAll(".city-btn").forEach(button => {
        button.addEventListener("click", () => fetchWeather(button.dataset.city));
    });

    document.addEventListener("click", (event) => {
        if (weatherCard && !weatherCard.contains(event.target)) {
            resetApp();
        }
    });
};

</script>


