@page "/dashboard"
@rendermode InteractiveServer

@using MWA.Models
@using MWA.Services
@using MWA.DBConnections
@using Microsoft.AspNetCore.Components.Authorization
@inject WeatherService WeatherService
@inject MongoHelper MongoHelper
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject Supabase.Client supabase
@using Supabase.Gotrue;


<button class="mode-toggle" onclick="toggleMode()">
    <img src="images/contrast.png">
</button>

<h2 class="dashboard-title">Your Favorite Cities</h2>

<button @onclick="RefreshData" class="refresh-btn">🔄 Refresh</button>

<button @onclick="ToggleTempUnit" class="unit-toggle-btn">
    @((showCelsius ? "Switch to °F" : "Switch to °C"))
</button>

@if (!isAuthenticated)
{
    <p class="login-warning">Please log in first to use Dashboard.</p>
}
else if (isLoading)
{
    <p>Loading your saved cities...</p>
}
else if (favoriteWeatherList.Count == 0)
{
    <p>You have no favorite cities saved.</p>
}
else
{
    <div class="dashboard-grid">
        @foreach (var item in favoriteWeatherList)
        {
            
            <div class="weather-card">
            <img src="images/@(item.Weather.Main.ToLower()).png" alt="@item.Weather.Description" width="40" />
                <h3>@item.CityName</h3>
                <p>Temp: @(showCelsius ? item.Weather.Temperature : (item.Weather.Temperature * 9/5 + 32))@(showCelsius ? "°C" : "°F")</p>
                <p>@item.Weather.Main - @item.Weather.Description</p>
                <p>Temp: @item.Weather.Temperature°C</p>
                <p>Humidity: @item.Weather.Humidity%</p>
                <p>Wind: @item.Weather.WindSpeed m/s</p>
                <button @onclick="() => RemoveFavorite(item.CityName)" class="remove-btn">Remove</button>
            </div>
        }
    </div>
}

@code {
    private bool isAuthenticated = false;
    private bool isLoading = true;

    private string userId = string.Empty;
    private List<FavoriteCity> favoriteCities = new();
    private List<(string CityName, WeatherResponse Weather)> favoriteWeatherList = new();

    

    protected override async Task OnInitializedAsync()
    {
        var session = supabase.Auth.CurrentSession;
        isAuthenticated = session?.User != null;

        if (!isAuthenticated || session.User?.Id == null)
{
    Navigation.NavigateTo("/login", forceLoad: true);
    return;
}

        userId = session?.User?.Id ?? string.Empty;

        try
        {
            favoriteCities = await MongoHelper.GetFavoriteCitiesAsync(userId);
            Console.WriteLine($"Loaded {favoriteCities.Count} favorite cities");
            foreach (var fav in favoriteCities)
{
    var weather = await WeatherService.GetWeatherDataAsync(fav.CityName);
    Console.WriteLine($"Fetched weather for {fav.CityName}: {weather?.Main} | {weather?.Temperature}");

    if (weather != null)
    {
        favoriteWeatherList.Add((fav.CityName, weather));
    }
    else
    {
        Console.WriteLine($"⚠️ Weather data is null for {fav.CityName}");
    }
}
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading favorite cities: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task RemoveFavorite(string cityName)
{
    if (string.IsNullOrEmpty(userId)) return;

    await MongoHelper.DeleteFavoriteCityAsync(cityName, userId);
    favoriteWeatherList.RemoveAll(c => c.CityName == cityName);
    StateHasChanged();
}

    private async Task RefreshData()
{
    favoriteWeatherList.Clear();
    if (!string.IsNullOrEmpty(userId))
    {
        favoriteCities = await MongoHelper.GetFavoriteCitiesAsync(userId);
        foreach (var fav in favoriteCities)
        {
            var weather = await WeatherService.GetWeatherDataAsync(fav.CityName);
            if (weather != null)
            {
                favoriteWeatherList.Add((fav.CityName, weather));
            }
        }
    }
}

private bool showCelsius = true;

private void ToggleTempUnit()
{
    showCelsius = !showCelsius;
}

private bool IsDarkMode = false;

    private string ModeIcon => "images/contrast.png"; // You can swap icons if needed

    private void ToggleMode()
    {
        IsDarkMode = !IsDarkMode;
    }
}

<script>
    function toggleMode() {
        document.body.classList.toggle("dark-mode");
        localStorage.setItem("dark-mode", document.body.classList.contains("dark-mode"));
    }

    document.addEventListener("DOMContentLoaded", function () {
        if (localStorage.getItem("dark-mode") === "true") {
            document.body.classList.add("dark-mode");
        }
    });
</script>