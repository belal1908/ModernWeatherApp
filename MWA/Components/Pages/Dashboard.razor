@page "/dashboard"
@rendermode InteractiveServer

@inject IJSRuntime JS

@using MWA.Models
@using MWA.Services
@using MWA.DBConnections
@using Microsoft.AspNetCore.Components.Authorization
@inject WeatherService WeatherService
@inject MongoHelper MongoHelper
@inject AlertService AlertService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject Supabase.Client supabase
@using Supabase.Gotrue;

<button class="mode-toggle" @onclick="ToggleMode">
    <img src="images/contrast.png">
</button>

<h2 class="dashboard-title">Your Favorite Cities</h2>

<h3 class="alert-settings-title">⚙️ Custom Alert Settings</h3>
<div class="alert-settings">
    <label>
        Temp Threshold (°C):
        <input type="number" @bind="tempThreshold" class="threshold-input" />
    </label>
    <label>
        Wind Threshold (m/s):
        <input type="number" @bind="windThreshold" class="threshold-input" />
    </label>
    <button @onclick="SaveThresholds" class="save-btn">💾 Save Preferences</button>
</div>

<button @onclick="RefreshData" class="refresh-btn">🔄 Refresh</button>
<button @onclick="ToggleTempUnit" class="temp-toggle-btn">@((showCelsius ? "Switch to °F" : "Switch to °C"))</button>

<label class="alert-toggle">
    <input type="checkbox" @bind-value="emailAlertsEnabled" @bind-value:event="onchange" />
    <span>Receive Email Alerts</span>
</label>

@if (!isAuthenticated)
{
    <p class="login-warning">Please log in first to use Dashboard.</p>
}
else if (isLoading)
{
    <div class="loading-state">
        <p>⏳ Fetching weather and alerts...</p>
    </div>
}
else if (favoriteWeatherList.Count == 0)
{
    <p>You have no favorite cities saved.</p>
}
else
{
    <div class="dashboard-grid">
        @foreach (var item in favoriteWeatherList)
        {
            var themeClass = item.Weather.Main.ToLower() switch
            {
                "clear" => "theme-clear",
                "clouds" => "theme-clouds",
                "rain" => "theme-rain",
                "drizzle" => "theme-drizzle",
                "mist" => "theme-mist",
                _ => "theme-default"
            };

            <div class="weather-card @themeClass">
                <img src="images/@(item.Weather.Main.ToLower()).png" alt="@item.Weather.Description" width="40" />
                <h3>
                    @item.CityName
                    @if (item.Weather.Temperature > 35 || item.Weather.WindSpeed > 25)
                    {
                        <span class="alert-badge">⚠️ Alert</span>
                    }
                </h3>
                <p>Temp: @(showCelsius ? item.Weather.Temperature : (item.Weather.Temperature * 9 / 5 + 32))@(showCelsius ? "°C" : "°F")</p>
                <p>@item.Weather.Main - @item.Weather.Description</p>
                <p>Humidity: @item.Weather.Humidity%</p>
                <p>Wind: @item.Weather.WindSpeed m/s</p>
                <button @onclick="() => RemoveFavorite(item.CityName)" class="remove-btn">Remove</button>
            </div>
        }
    </div>

    @if (weatherAlerts.Count > 0)
{
    <h3 class="alert-history-title">📜 Weather Alerts History</h3>
    <ul class="alert-history">
        @foreach (var alert in weatherAlerts)
        {
            <li>
                <strong>@alert.City</strong> - @alert.Message
                <span class="alert-time">(@alert.Timestamp.ToLocalTime().ToString("g"))</span>
                <button class="remove-alert-btn" @onclick="() => DeleteAlert(alert.Id)">🗑️</button>
            </li>
        }
    </ul>
}
}


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">@errorMessage</div>
}

@code {
    private bool isAuthenticated = false;
    private bool emailAlertsEnabled = true;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private string userId = string.Empty;
    private List<FavoriteCity> favoriteCities = new();
    private List<AlertLog> weatherAlerts = new();
    private List<(string CityName, WeatherResponse Weather)> favoriteWeatherList = new();

    protected override async Task OnInitializedAsync()
    {
        var session = supabase.Auth.CurrentSession;
        isAuthenticated = session?.User != null;

        if (!isAuthenticated || session.User?.Id == null)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }

        userId = session.User.Id;


        var pref = await MongoHelper.GetUserAlertPreferenceAsync(userId);

        emailAlertsEnabled = pref.EmailAlertsEnabled;

if (pref != null)
{
    tempThreshold = pref.TempThreshold;
    windThreshold = pref.WindThreshold;
    emailAlertsEnabled = pref.EmailAlertsEnabled; 
}

        try
        {
            isLoading = true;
            errorMessage = string.Empty;    

            favoriteCities = await MongoHelper.GetFavoriteCitiesAsync(userId);
            weatherAlerts = await MongoHelper.GetWeatherAlertsAsync(userId);

            foreach (var fav in favoriteCities)
            {
                var weather = await WeatherService.GetWeatherDataAsync(fav.CityName);
                Console.WriteLine($"Fetched weather for {fav.CityName}: {weather?.Main} | {weather?.Temperature}");

                if (weather != null)
                {
                    favoriteWeatherList.Add((fav.CityName, weather));

                    if (weather.Temperature > tempThreshold || weather.WindSpeed > windThreshold)
                    {
                        var alertMessage = $"⚠️ Severe weather in {fav.CityName}: {weather.Temperature}°C, Wind: {weather.WindSpeed} m/s";

                        if (emailAlertsEnabled)
                            {
                                await AlertService.SendAlertEmailAsync(
                                    toEmail: "belalafzal19@gmail.com",
                                    city: fav.CityName,
                                    alertMessage: alertMessage);
                            }

                            await MongoHelper.AddWeatherAlertAsync(new AlertLog
                            {
                                UserId = userId,
                                City = fav.CityName,
                                Message = alertMessage,
                                Timestamp = DateTime.UtcNow
                            });
                    }
                }
                else
                {
                    Console.WriteLine($"⚠️ Weather data is null for {fav.CityName}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "⚠️ Unable to load your dashboard. Please try again later.";
            Console.WriteLine($"Error loading favorite cities: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
        
    }

    private async Task UpdateEmailAlertPreference(ChangeEventArgs e)
{
    var newValue = (bool)e.Value;
    emailAlertsEnabled = newValue;

    var pref = await MongoHelper.GetUserAlertPreferenceAsync(userId) ?? new UserAlertPreference { UserId = userId };
    pref.EmailAlertsEnabled = emailAlertsEnabled;
    pref.TempThreshold = tempThreshold;
    pref.WindThreshold = windThreshold;

    await MongoHelper.SetUserAlertPreferenceAsync(pref);
}

    private async Task RemoveFavorite(string cityName)
{
    if (string.IsNullOrEmpty(userId)) return;

    await MongoHelper.DeleteFavoriteCityAsync(cityName, userId);
    await MongoHelper.DeleteAlertsByCityAsync(userId, cityName); 

    favoriteWeatherList.RemoveAll(c => c.CityName == cityName);
    weatherAlerts.RemoveAll(a => a.City == cityName); //  Also remove from current alerts view

    StateHasChanged();
}

    private async Task RefreshData()
    {
        favoriteWeatherList.Clear();
        weatherAlerts.Clear();

        if (!string.IsNullOrEmpty(userId))
        {
            favoriteCities = await MongoHelper.GetFavoriteCitiesAsync(userId);
            weatherAlerts = await MongoHelper.GetWeatherAlertsAsync(userId);

            foreach (var fav in favoriteCities)
            {
                var weather = await WeatherService.GetWeatherDataAsync(fav.CityName);
                if (weather != null)
                {
                    favoriteWeatherList.Add((fav.CityName, weather));

                    if (weather.Temperature > 35 || weather.WindSpeed > 25)
                    {
                        var alertMessage = $"⚠️ Severe weather in {fav.CityName}: {weather.Temperature}°C, Wind: {weather.WindSpeed} m/s";

                        if (emailAlertsEnabled)
                    {
                        await AlertService.SendAlertEmailAsync(
                            toEmail: "belalafzal19@gmail.com",
                            city: fav.CityName,
                            alertMessage: alertMessage);
                    }

                    await MongoHelper.AddWeatherAlertAsync(new AlertLog
                    {
                        UserId = userId,
                        City = fav.CityName,
                        Message = alertMessage,
                        Timestamp = DateTime.UtcNow
                    });
                    }
                }
            }
        }
    }

    private bool showCelsius = true;
    private void ToggleTempUnit() => showCelsius = !showCelsius;

    private bool IsDarkMode = false;
    private string ModeIcon => "images/contrast.png";

private async Task ToggleMode()
{
    await JS.InvokeVoidAsync("toggleMode");
}

    private async Task DeleteAlert(string alertId)
{
    await MongoHelper.DeleteWeatherAlertAsync(alertId);
    weatherAlerts.RemoveAll(a => a.Id == alertId);
    StateHasChanged();
}


private double tempThreshold = 35;
private double windThreshold = 25;

private async Task SaveThresholds()
{
    await MongoHelper.SetUserAlertPreferenceAsync(new UserAlertPreference
    {
        UserId = userId,
        TempThreshold = tempThreshold,
        WindThreshold = windThreshold
    });

    Console.WriteLine("✅ Preferences saved");
}

}

<style>
.temp-toggle-btn {
    margin: 1rem auto;
    display: block;
    padding: 0.4rem 0.8rem;
    background-color: #4caf50;
    border: none;
    border-radius: 6px;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
}

.temp-toggle-btn:hover {
    background-color: #388e3c;
}

.theme-clear {
    background-color: #fceabb;
    color: #333;
}
.theme-clouds {
    background-color: #dfe6e9;
    color: #333;
}
.theme-rain {
    background-color: #a4b0be;
    color: #fff;
}
.theme-drizzle {
    background-color: #74b9ff;
    color: #fff;
}
.theme-mist {
    background-color: #b2bec3;
    color: #000;
}
.theme-default {
    background-color: #636e72;
    color: #fff;
}
</style>
