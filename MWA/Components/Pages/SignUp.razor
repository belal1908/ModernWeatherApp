@page "/signup"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using MWA.Services
@inject AuthService authService

<div class="card">
    <div class="signup-form">
        <input type="email" placeholder="Enter Email" @bind="email" required />
        <input type="password" placeholder="Enter Password" @bind="password" required />
        <input type="password" placeholder="Confirm Password" @bind="confirmPassword" required />
        <button @onclick="OnSignup" disabled="@isSigningUp">
            @(isSigningUp ? "Signing up..." : "Sign Up")
        </button>
    </div>

    <div class="error" style="@(string.IsNullOrEmpty(signupMessage) ? "display: none;" : "display: block;")">
        <p>@signupMessage</p>
    </div>

    <p class="login-text">Already have an account? <a href="/login">Log In</a></p>
</div>

@code {
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private bool isSigningUp = false;
    private string signupMessage = "";

    private async Task OnSignup()
    {
        if (isSigningUp) return;

        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            signupMessage = "All fields are required.";
            return;
        }

        if (password != confirmPassword)
        {
            signupMessage = "Passwords do not match!";
            return;
        }

        isSigningUp = true;
        signupMessage = "";

        bool isRegistered = await authService.SignUp(email.Trim(), password);

        if (isRegistered)
        {
            signupMessage = "Signup successful! Check your email to verify your account.";
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            signupMessage = "Signup failed. Please try again.";
        }

        isSigningUp = false;
    }
}