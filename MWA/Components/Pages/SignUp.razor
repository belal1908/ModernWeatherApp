@page "/signup"
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Authorization
@using Supabase
@using Supabase.Gotrue
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Sign Up</h1>

<div class="card">
    <div class="signup-form">
        <input type="email" placeholder="Enter Email" @bind="email" required>
        <input type="text" placeholder="Enter Username" @bind="username" required>
        <input type="password" placeholder="Enter Password" @bind="password" required>
        <input type="password" placeholder="Confirm Password" @bind="confirmPassword" required>
        <button @onclick="RegisterUser">Sign Up</button>
        <p class="login-text">Already have an account? <a href="/login">Log In</a></p>
    </div>
</div>

@if (!string.IsNullOrEmpty(signupMessage))
{
    <p class="message">@signupMessage</p>
}

@code {
    private string? email;
    private string? username;
    private string? password;
    private string? confirmPassword;
    private string signupMessage = "";

    private async Task RegisterUser()
    {
        if (password != confirmPassword)
        {
            signupMessage = "Passwords do not match!";
            return;
        }

        try
        {
            var response = await SupabaseClient.Auth.SignUp(email, password);

            if (response.User != null)
            {
                signupMessage = "Signup successful! Please check your email to verify your account.";
            }
            else
            {
                signupMessage = "Signup failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            signupMessage = $"Error: {ex.Message}";
        }
    }
}
