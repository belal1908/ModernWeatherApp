@page "/monthly-stats"
@using MudBlazor
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConfiguration Configuration

<PageTitle>Monthly Weather Statistics</PageTitle>

<MudButton Class="mode-toggle" OnClick="ToggleDarkMode">
    <img src="images/contrast.png" alt="Toggle Theme" />
</MudButton>

<h2 class="text-center text-2xl font-bold mt-6">ðŸ“Š Monthly Weather Statistics</h2>

<div class="trend-container">
    <div class="trend-input-group">
        <input @bind="city" placeholder="Enter City" class="trend-input" />
        <select @bind="selectedMonth" class="trend-date">
            @foreach (var month in months)
            {
                <option value="@month.Value">@month.Key</option>
            }
        </select>

        <MudButton OnClick="FetchMonthlyStats" Variant="Variant.Filled" Color="Color.Primary" Class="trend-button">
            Analyze
        </MudButton>
    </div>

    @if (isLoading)
    {
        <p class="loading-text">Loading data...</p>
    }

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <p class="error-text">@errorMessage</p>
    }

    @if (chartVisible)
    {
        <div class="trend-chart-wrapper">
            <div class="chart-inner">
                <canvas id="monthlyChart"></canvas>
            </div>
        </div>
    }
</div>

@code {
    private string city = "Delhi";
    private string selectedMonth = DateTime.Now.Month.ToString("00");
    private bool isLoading = false;
    private string errorMessage = "";
    private List<DailyStat> monthlyStats = new();
    private bool chartVisible = false;

    private Dictionary<string, string> months = new()
    {
        { "January", "01" }, { "February", "02" }, { "March", "03" },
        { "April", "04" }, { "May", "05" }, { "June", "06" },
        { "July", "07" }, { "August", "08" }, { "September", "09" },
        { "October", "10" }, { "November", "11" }, { "December", "12" },
    };

    private async Task FetchMonthlyStats()
    {
        errorMessage = "";
        isLoading = true;
        chartVisible = false;
        StateHasChanged();

        try
        {
            monthlyStats = await GetMonthlyDataAsync(city, selectedMonth);

            if (monthlyStats.Count == 0)
            {
                errorMessage = "No data found for this month.";
                isLoading = false;
                return;
            }

            chartVisible = true;
            isLoading = false;
            StateHasChanged();

            await Task.Delay(100);
            await JS.InvokeVoidAsync("plotMonthlyWeatherStats", city, monthlyStats);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to fetch data.";
            Console.WriteLine(ex.Message);
            isLoading = false;
        }
    }

    private async Task ToggleDarkMode()
    {
        await JS.InvokeVoidAsync("toggleDarkMode");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applySavedMode");
        }
    }

    private async Task<(double lat, double lon)> GetCoordinatesAsync(string city)
    {
        var apiKey = Configuration["WeatherApi:Key"];
        var url = $"https://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={apiKey}";
        var http = new HttpClient();
        var result = await http.GetFromJsonAsync<List<GeoResult>>(url);
        var location = result?.FirstOrDefault();
        if (location == null) throw new Exception("City not found.");
        return (location.Lat, location.Lon);
    }

    private async Task<List<DailyStat>> GetMonthlyDataAsync(string city, string month)
    {
        var apiKey = Configuration["WeatherApi:Key"];
        var (lat, lon) = await GetCoordinatesAsync(city);
        var url = $"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={apiKey}&units=metric";

        var http = new HttpClient();
        var forecast = await http.GetFromJsonAsync<ForecastResponse>(url);
        if (forecast == null || forecast.List.Count == 0) throw new Exception("No forecast data found.");

        return forecast.List
            .Where(f => DateTime.Parse(f.Dt_txt).ToString("MM") == month)
            .GroupBy(f => DateTime.Parse(f.Dt_txt).Date)
            .Select(g => new DailyStat
            {
                Date = g.Key.ToString("yyyy-MM-dd"),
                AvgTemp = Math.Round(g.Average(x => x.Main.Temp), 2),
                AvgHumidity = Math.Round(g.Average(x => x.Main.Humidity), 2),
                TotalRain = Math.Round(g.Sum(x => x.Rain?.ThreeH ?? 0), 2)
            })
            .ToList();
    }

    public class GeoResult
    {
        public double Lat { get; set; }
        public double Lon { get; set; }
    }

    public class ForecastResponse
    {
        public List<ForecastItem> List { get; set; } = new();
    }

    public class ForecastItem
    {
        public MainInfo Main { get; set; } = new();
        public RainInfo? Rain { get; set; }
        public string Dt_txt { get; set; } = "";
    }

    public class MainInfo
    {
        public double Temp { get; set; }
        public double Humidity { get; set; }
    }

    public class RainInfo
    {
        [System.Text.Json.Serialization.JsonPropertyName("3h")]
        public double? ThreeH { get; set; }
    }

    public class DailyStat
    {
        public string? Date { get; set; }
        public double AvgTemp { get; set; }
        public double AvgHumidity { get; set; }
        public double TotalRain { get; set; }
    }
}

<style>
.trend-chart-wrapper {
    position: relative;
    width: 100%;
    max-width: 900px;
    margin: auto;
    padding: 1rem;
}

.chart-inner {
    position: center;
    width: 100%;
    height: 500px;
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    box-sizing: border-box;
}

.dark-mode .chart-inner {
    background-color: #121212;
}

canvas {
    display: block;
    width: 100% !important;
    height: 100% !important;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let monthlyChartInstance = null;

    async function plotMonthlyWeatherStats(city, data) {
        await new Promise(resolve => setTimeout(resolve, 100));
        const canvas = document.getElementById("monthlyChart");
        if (!canvas) return;

        const ctx = canvas.getContext("2d");

        if (monthlyChartInstance) monthlyChartInstance.destroy();

        monthlyChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.map(d => d.date),
                datasets: [
                    {
                        label: 'Avg Temperature (Â°C)',
                        data: data.map(d => d.avgTemp),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.3)',
                        yAxisID: 'y',
                        type: 'line',
                        tension: 0.4
                    },
                    {
                        label: 'Avg Humidity (%)',
                        data: data.map(d => d.avgHumidity),
                        borderColor: 'rgba(54, 162, 235, 1)',
                        backgroundColor: 'rgba(54, 162, 235, 0.3)',
                        yAxisID: 'y1'
                    },
                    {
                        label: 'Total Rainfall (mm)',
                        data: data.map(d => d.totalRain),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.4)',
                        yAxisID: 'y2'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                stacked: false,
                plugins: {
                    title: {
                        display: true,
                        text: `ðŸ“Š Monthly Weather Stats for ${city}`
                    },
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        type: 'linear',
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Temperature (Â°C)'
                        }
                    },
                    y1: {
                        type: 'linear',
                        position: 'right',
                        grid: { drawOnChartArea: false },
                        title: {
                            display: true,
                            text: 'Humidity (%)'
                        }
                    },
                    y2: {
                        type: 'linear',
                        position: 'right',
                        offset: true,
                        grid: { drawOnChartArea: false },
                        title: {
                            display: true,
                            text: 'Rainfall (mm)'
                        }
                    }
                }
            }
        });
    }

    function toggleDarkMode() {
        document.body.classList.toggle('dark-mode');
        localStorage.setItem('mode', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
    }

    function applySavedMode() {
        if (localStorage.getItem('mode') === 'dark') {
            document.body.classList.add('dark-mode');
        }
    }
</script>