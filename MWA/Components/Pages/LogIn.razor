@page "/login"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using MWA.Services

@inject AuthService authService
@inject UserStateService userState

<body class="login-page"></body>

<div class="login-card">
    <div class="login-form">
        <input type="text" placeholder="Email" spellcheck="false" @bind="email">
        <input placeholder="Password" @bind="password" type="@passwordInputType">
        <button @onclick="OnLogin" disabled="@isLoggingIn">Log In</button>
        <button @onclick="TogglePasswordVisibility">@passwordIcon</button>
    </div>

    <div class="error" style="@(string.IsNullOrEmpty(errorMessage) ? "display: none;" : "display: block;")">
        <p>@errorMessage</p>
    </div>

    <p class="signup-text">Don't have an account? <a href="/signup">Sign Up</a></p>
</div>

@code {
    private string email = "";
    private string password = "";
    private bool isLoggingIn = false;
    private string? errorMessage;

    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";
    private string passwordIcon => isPasswordVisible ? "🙈" : "👁️";

public async Task OnLogin()
{
    if (isLoggingIn) return;

    isLoggingIn = true;
    string? result = await authService.SignIn(email, password); // ✅ Now matches return type

    if (string.IsNullOrEmpty(result))
    {
        NavigationManager.NavigateTo("/weather");
    }
    else
    {
        errorMessage = result; // Show error message
    }

    isLoggingIn = false;
}

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }
}