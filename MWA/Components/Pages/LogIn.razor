@page "/login"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using MWA.Services
@inject AuthService authService
@inject UserStateService userState
@inject Supabase.Client supabase
@using Supabase.Gotrue;

<body class="login-page"></body>

<div class="login-card">
    <div class="login-form">
        <input type="text" placeholder="Email" spellcheck="false" @bind="email" />
        <input type="password" placeholder="Password" @bind="password" />
        <button @onclick="OnLogin" disabled="@isLoggingIn">
            @(isLoggingIn ? "Logging in..." : "Log In")
        </button>
    </div>

    <div class="error" style="@(string.IsNullOrEmpty(errorMessage) ? "display: none;" : "display: block;")">
        <p>@errorMessage</p>
    </div>

    <p class="signup-text">Don't have an account? <a href="/signup">Sign Up</a></p>
</div>

@code {
    private string email = "";
    private string password = "";
    private bool isLoggingIn = false;
    private string? errorMessage;

    private async Task OnLogin()
{
    if (isLoggingIn) return;

    if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
    {
        errorMessage = "Email and password are required.";
        return;
    }

    isLoggingIn = true;
    errorMessage = null;

    string? result = await authService.SignIn(email.Trim(), password);

    if (string.IsNullOrEmpty(result))
    {
        var session = supabase.Auth.CurrentSession;

        if (session?.User != null)
        {
            // âœ… Set user session in UserStateService
            userState.SetLoggedInUserId(session.User.Id);
            userState.SetUser(session.User.Id, session.User.Email);
            Console.WriteLine($"User session set: {session.User.Email} ({session.User.Id})");
        }

        NavigationManager.NavigateTo("/weather", forceLoad: true);
    }
    else
    {
        errorMessage = result;
    }

    isLoggingIn = false;
}
}