@page "/temperature-trend"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject IJSRuntime JS
@using MudBlazor

<PageTitle>Temperature Trends</PageTitle>

<h2 class="trend-heading">ðŸ“ˆ Temperature Trend Analysis</h2>

<MudButton Class="theme-toggle" OnClick="ToggleDarkMode">
    <img src="images/contrast.png" alt="Toggle Theme" />
</MudButton>

<div class="trend-container">
    <div class="trend-input-group">
        <input @bind="city" placeholder="Enter City" class="trend-input" />
        <input type="date" @bind="startDate" class="trend-date" />
        <input type="date" @bind="endDate" class="trend-date" />
        <MudButton OnClick="FetchTrend" Variant="Variant.Filled" Color="Color.Primary" Class="trend-button">
            Get Trend
        </MudButton>
    </div>

    @if (isLoading)
    {
        <p class="loading-text">Loading data...</p>
    }
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <p class="error-text">@errorMessage</p>
    }

    <div class="trend-chart-container">
        <canvas id="tempChart" width="800" height="400"></canvas>
    </div>
</div>

@code {
    private string city = "Delhi";
    private DateTime? startDate { get; set; } = DateTime.Today.AddDays(-7);
    private DateTime? endDate { get; set; } = DateTime.Today;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task FetchTrend()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            await JS.InvokeVoidAsync("fetchAndPlotTemperatureTrend", city, startDate?.ToString("yyyy-MM-dd"), endDate?.ToString("yyyy-MM-dd"));
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load chart. Try a valid city.";
            Console.WriteLine(ex);
        }

        isLoading = false;
    }

    private async Task ToggleDarkMode()
    {
        await JS.InvokeVoidAsync("toggleDarkMode");
    }
}

<!-- Include this in the same file or your layout -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    async function fetchAndPlotTemperatureTrend(city) {
        const canvas = document.getElementById("tempChart");
        if (!canvas) return;

        const ctx = canvas.getContext("2d");

        const geoRes = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=d8cab8bea5e32d2b21acf2fb9419eebf`);
        const geoData = await geoRes.json();
        if (!geoData[0]) {
            alert("City not found");
            return;
        }

        const lat = geoData[0].lat;
        const lon = geoData[0].lon;

        const forecastRes = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=d8cab8bea5e32d2b21acf2fb9419eebf`);
        const forecastData = await forecastRes.json();

        const dateGroups = {};
        forecastData.list.forEach(item => {
            const date = item.dt_txt.split(' ')[0];
            if (!dateGroups[date]) {
                dateGroups[date] = [];
            }
            dateGroups[date].push(item.main.temp);
        });

        const labels = Object.keys(dateGroups);
        const temps = labels.map(date => {
            const temps = dateGroups[date];
            return temps.reduce((a, b) => a + b, 0) / temps.length;
        });

        if (window.chartInstance) window.chartInstance.destroy();

        window.chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels,
                datasets: [{
                    label: `Temperature in ${city}`,
                    data: temps,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'Temperature (Â°C)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Date'
                        }
                    }
                }
            }
        });
    }

    function toggleDarkMode() {
        document.body.classList.toggle('dark-mode');
        localStorage.setItem('mode', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
    }

    window.onload = () => {
        if (localStorage.getItem('mode') === 'dark') {
            document.body.classList.add('dark-mode');
        }
    };
</script>